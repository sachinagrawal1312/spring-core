1
00:00:01,830 --> 00:00:02,640
Welcome back.

2
00:00:02,680 --> 00:00:06,830
We've been talking about the projects a lot until you know in this video.

3
00:00:06,840 --> 00:00:08,760
Let's get a quick.

4
00:00:09,000 --> 00:00:09,900
All of them.

5
00:00:09,990 --> 00:00:13,430
And also we look at a few examples of startup projects.

6
00:00:13,530 --> 00:00:15,360
So what are starter projects.

7
00:00:15,360 --> 00:00:20,060
If you look at the spring board documentation this is the definition for a spring board start a project.

8
00:00:20,140 --> 00:00:27,540
Doctors are convenient dependency descriptors so and when in dependency descriptor so it Bombarnac similar

9
00:00:27,840 --> 00:00:35,730
things which define dependencies that you can include in your application with doctors you would get

10
00:00:35,790 --> 00:00:42,030
a one stop shop for all spring and related technology that you would need.

11
00:00:42,030 --> 00:00:47,220
Let's look at springboards start of web which is this data for developing web application.

12
00:00:47,280 --> 00:00:54,180
If you look inside that specific jet all that you'll see is a simple on redig similar nothing else.

13
00:00:54,260 --> 00:01:00,380
There's a single blue light which actually defines what all the different things that it provides.

14
00:01:00,630 --> 00:01:06,350
But other than that all that which is present in there is a simple pondered Exham.

15
00:01:06,360 --> 00:01:08,730
So what does this Parnevik similar contain.

16
00:01:09,000 --> 00:01:12,750
If you look at this Bondra example it contains a dependency on this.

17
00:01:12,890 --> 00:01:19,620
Does being good data which is kind of the default standard which is present in all these doctors.

18
00:01:19,680 --> 00:01:25,650
Other than that it has a dependency on Giese on startup because spring Webb also supports restfully

19
00:01:25,650 --> 00:01:26,280
Web services.

20
00:01:26,280 --> 00:01:32,930
We would want to be able to convert someone to Java and Java to just one or two objects and object projects

21
00:01:32,930 --> 00:01:33,350
on.

22
00:01:33,360 --> 00:01:35,980
So this being good strategy will help you to do that.

23
00:01:36,150 --> 00:01:38,670
You can see that there is a dependency on Tom-Kat.

24
00:01:38,670 --> 00:01:45,090
That's how we would be able to get Tom get as the embedded server you can see that there is a dependency

25
00:01:45,090 --> 00:01:46,230
on hibernate validator.

26
00:01:46,230 --> 00:01:49,880
This is the default implementation of validation API.

27
00:01:50,070 --> 00:01:57,150
And also there is a dependency on this spring MVC framework so you can see that this being booed starter

28
00:01:57,330 --> 00:02:03,560
has all the dependencies that are needed to develop a typical web application.

29
00:02:03,560 --> 00:02:09,180
So I don't need to worry about what question of each one of these do you or any of that kind of stuff

30
00:02:09,330 --> 00:02:12,760
that I need to do is include this doctrine and everything else.

31
00:02:12,810 --> 00:02:14,380
I would get for free.

32
00:02:14,520 --> 00:02:21,990
If you look at this for data AJP this is for developing any hibernate applications are J-P applications

33
00:02:22,560 --> 00:02:25,640
then you'd see a palm read simle also in here.

34
00:02:25,650 --> 00:02:30,150
This Banyard example if you look at it it contains or does it contain.

35
00:02:30,240 --> 00:02:36,390
It contains the basic starter again and you have status for AOP NJT B.C are also present in here and

36
00:02:36,450 --> 00:02:39,760
then that we would have a dependency on hibernate code.

37
00:02:39,960 --> 00:02:42,290
That's the default implementation of JPR.

38
00:02:42,540 --> 00:02:48,650
As far as being good data is concerned you have the transaction API to be able to implement transactions.

39
00:02:48,780 --> 00:02:52,630
And also we have spring data that included by default.

40
00:02:52,830 --> 00:02:59,930
So these are the same books you would need to data up your JPA applications other then spring has aspects

41
00:03:00,520 --> 00:03:04,500
as it says here it's just a convenient dependency descriptor.

42
00:03:04,500 --> 00:03:09,180
So basically what we are doing there is defining Palm is similar to with all the dependencies that we

43
00:03:09,180 --> 00:03:14,160
would need to set up that kind of application if it's a web application what would you need to develop

44
00:03:14,280 --> 00:03:15,110
a web application.

45
00:03:15,110 --> 00:03:21,940
All those are present in your dependency descriptors now that we understand what's in a startup project.

46
00:03:21,990 --> 00:03:25,430
Let's look at what all the different starters which are bailable.

47
00:03:25,620 --> 00:03:28,780
The first doctor is a good start of Web services.

48
00:03:28,920 --> 00:03:35,380
So one important thing you need to remember is even though it's called Web services it's only used to

49
00:03:35,380 --> 00:03:38,940
dial the top web services for restfully Web services.

50
00:03:38,940 --> 00:03:41,080
We have to use splaying would start over there.

51
00:03:41,370 --> 00:03:47,160
When we say it's been good to start up Web services we're talking about soap Web services so things

52
00:03:47,370 --> 00:03:53,910
like defining your access these generating D-W SDL from that defining good end point handling your soap

53
00:03:53,910 --> 00:03:57,030
requests all that can be done using spring boot start over.

54
00:03:57,030 --> 00:04:03,430
So this thing would start a Web is the one to develop web applications and also address all that.

55
00:04:03,440 --> 00:04:11,300
So is this springboard start a test is also included by default in almost all the projects.

56
00:04:11,460 --> 00:04:17,400
So when you create a project with springboard you would by default include sping would start this because

57
00:04:17,490 --> 00:04:19,410
you have to write you need this.

58
00:04:19,470 --> 00:04:23,100
You can also write integration tests using sping good stuff.

59
00:04:23,160 --> 00:04:29,430
Just saying good strategy ODBC will help you to write traditional GBC based applications so here we

60
00:04:29,430 --> 00:04:36,840
are talking about getting C and NJT we applications so you can write a query and get the details out

61
00:04:36,840 --> 00:04:38,650
of the database and things like that.

62
00:04:38,740 --> 00:04:44,090
Spring would start to hate us is when we develop a regular web application.

63
00:04:44,130 --> 00:04:47,440
We also want to add features to it.

64
00:04:47,460 --> 00:04:51,470
We'll discuss about eight years later when we talk about full applications in detail.

65
00:04:51,890 --> 00:04:52,410
It's been good.

66
00:04:52,410 --> 00:04:58,030
Straight ahead to us helps us to add hideous features to your application or actually do you address.

67
00:04:58,040 --> 00:05:05,530
So this spring would start the security helps you you add authentication to your web and there's food

68
00:05:05,530 --> 00:05:08,170
there services spring would start the day.

69
00:05:08,350 --> 00:05:11,900
Is the start for developing G.P.A. with hibernated.

70
00:05:12,370 --> 00:05:19,230
And if you want to implement gashing in your application then you can use springboards dyadic gash.

71
00:05:19,240 --> 00:05:26,290
The great thing is sping would start at cash not only support the default gashing with things like E.H.

72
00:05:26,290 --> 00:05:33,680
cash and stuff like that it also get support distributed caching with things like his guest the last

73
00:05:33,680 --> 00:05:37,070
part that we will talk about the spring would start at the dentist.

74
00:05:37,090 --> 00:05:45,950
So whenever you have a J-P entity which you would want to expose to the outside world using it as web

75
00:05:45,970 --> 00:05:52,960
services you can easily do that using a springboard data did it just it helps you to take your spring

76
00:05:52,960 --> 00:05:58,370
data repositories and make them available as a restful web series.

77
00:05:58,570 --> 00:06:04,920
In this video we looked at startups and we looked at the examples of that and didn't actually do but

78
00:06:04,990 --> 00:06:05,210
we.

